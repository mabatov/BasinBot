import sqlite3
import datetime
import telebot
from telebot import types
from config import CONFIG_VARS

bot = telebot.TeleBot(CONFIG_VARS.token_test)
conn = sqlite3.connect('db/BasinBot.db', check_same_thread=False)
cursor = conn.cursor()


def db_insert_user(user_id: int, username: str, user_firstname: str, user_lastname: str):
    cursor.execute('INSERT INTO user (user_id, username, user_firstname, user_lastname) VALUES (?, ?, ?, ?)',
                   (user_id, username, user_firstname, user_lastname))
    conn.commit()


def db_check_user(user_id: int):
    cursor.execute('select username from user where user_id =?', (user_id,))
    usr = cursor.fetchone()
    if usr is not None:
        return usr[0]
    else:
        return usr


def db_startBooking(user_id: int, username: str, user_firstname: str, user_lastname: str):
    cursor.execute('UPDATE user set isBooked = TRUE where user_id = ?', (user_id,))
    cursor.execute('INSERT INTO booking (user_id, startTime) VALUES (?, ?)', (user_id, datetime.datetime.now()))
    conn.commit()


def db_stopBooking(user_id: int, username: str, user_firstname: str, user_lastname: str):
    cursor.execute('UPDATE user set isBooked = FALSE where user_id = ?', (user_id,))
    cursor.execute('UPDATE booking set stopTime = ? where user_id = ? AND startTime is not NULL AND stopTime is NULL',
                   (datetime.datetime.now(), user_id))
    conn.commit()


def db_checkBooking():
    cursor.execute('select username from user where isBooked = 1')
    chkBooking = cursor.fetchone()
    return chkBooking


def db_selectAllUsers():
    cursor.execute('select * from user')
    chkBooking = cursor.fetchall()
    return chkBooking


def db_checkLastWasher():
    cursor.execute('select username from user where user_id = (select user_id from booking order by stopTime desc)')
    result = str(cursor.fetchone())[2:-3]
    return result

def db_stats():
    cursor.execute('select ROW_NUMBER() OVER(order by sum(minutes) desc) place, user_firstname, sum(minutes), count(1) numOfWashings from V_BOOKING group by username')
    return cursor.fetchall()

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    username = message.from_user.username
    user_firstname = message.from_user.first_name
    user_lastname = message.from_user.last_name

    regState = db_check_user(user_id=user_id)
    if regState is None: regState = 'not registered'

    print(str(datetime.datetime.now()) + '[INFO] ' + 'The result of db_check_user: ' + str(regState))
    if regState is not None:
        print(str(datetime.datetime.now()) + '[INFO] ' + '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(regState) + ' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
        bot.send_message(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(username) + ' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
    else:
        db_insert_user(user_id=user_id, username=username, user_firstname=user_firstname, user_lastname=user_lastname)
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + message.from_user.first_name + '!')
        bot.send_message(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
        print(str(datetime.datetime.now()) + '[INFO] ' + '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(username) + ' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ó–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!')
    item2 = types.KeyboardButton('–¢–∞–∑–∏–∫ —Å–≤–æ–±–æ–¥–µ–Ω!')
    item3 = types.KeyboardButton('–£ –∫–æ–≥–æ —Ç–∞–∑–∏–∫?')
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', reply_markup=markup)


@bot.message_handler(commands=['stats'])
def statistics_message(message):
    user_id = message.from_user.id
    username = message.from_user.username
    user_firstname = message.from_user.first_name
    user_lastname = message.from_user.last_name

    print(str(datetime.datetime.now()) + '[INFO] ' + username + ' –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Å—Ç–∏—Å—Ç–∏–∫—É')
    print(db_stats())

    result = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
    for i in db_stats():
        if (i[0]==1): result += 'ü•á '
        elif (i[0]==2): result += 'ü•à '
        elif (i[0]==3): result += 'ü•â '
        result += '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(i[1]) + ', —Å—Ç–∏—Ä–æ–∫: ' + str(i[3]) + ' (' + str(i[2]) + ' –º–∏–Ω)\n'

    print(result)
    bot.send_message(message.chat.id, result)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    user_id = message.from_user.id
    username = message.from_user.username
    user_firstname = message.from_user.first_name
    user_lastname = message.from_user.last_name

    if message.text == '–ó–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!':
        if db_checkBooking() is not None:
            bot.send_message(message.chat.id, '‚õî @' + str(db_checkBooking())[2:-3] + ' —É–∂–µ —Å—Ç–∏—Ä–∞–µ—Ç')
            print(str(datetime.datetime.now()) + '[INFO] ' + username + ' –ø—ã—Ç–∞–ª—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Ç–∞–∑–∏–∫.')

        else:
            db_startBooking(user_id=user_id, username=username, user_firstname=user_firstname,
                            user_lastname=user_lastname)
            print(str(datetime.datetime.now()) + '[INFO] ' + username + ' –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Å—Ç–∏—Ä–∫–µ.')

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–¢–∞–∑–∏–∫ —Å–≤–æ–±–æ–¥–µ–Ω!')
            item3 = types.KeyboardButton('–£ –∫–æ–≥–æ —Ç–∞–∑–∏–∫?')
            markup.add(item1, item3)
            bot.send_message(message.chat.id, 'üß∫ –í—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ —Å—Ç–∏—Ä–∫–µ.', reply_markup=markup)

    elif message.text == '–¢–∞–∑–∏–∫ —Å–≤–æ–±–æ–¥–µ–Ω!':
        if db_checkBooking() is not None and (str(db_checkBooking())[2:-3] != username):
            print(str(datetime.datetime.now()) + '[INFO] ' + str(db_checkBooking())[2:-3])
            print(str(datetime.datetime.now()) + '[INFO] ' + user_firstname)
            bot.send_message(message.chat.id, '‚õî –ù–µ —É–¥–∞–ª–æ—Å—å. –¢–∞–∑–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä—É–∫–∞—Ö @' + str(db_checkBooking())[2:-3])
        elif db_checkBooking() is None:
            bot.send_message(message.chat.id,
                             '‚õî –ù–µ —É–¥–∞–ª–æ—Å—å. –¢–∞–∑–∏–∫ –Ω–µ –±—ã–ª –∑–∞–Ω—è—Ç. –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å—Ç–∏—Ä–∞–ª—Å—è @' + db_checkLastWasher())

        else:
            db_stopBooking(user_id=user_id, username=username, user_firstname=user_firstname,
                           user_lastname=user_lastname)
            print(str(datetime.datetime.now()) + '[INFO] ' + str(username) + ' –æ—Å–≤–æ–±–æ–¥–∏–ª —Ç–∞–∑–∏–∫.')

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–ó–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!')
            item3 = types.KeyboardButton('–£ –∫–æ–≥–æ —Ç–∞–∑–∏–∫?')
            markup.add(item1, item3)
            bot.send_message(message.chat.id, 'üÜì –í—ã –æ—Å–≤–æ–±–æ–¥–∏–ª–∏ —Ç–∞–∑–∏–∫.', reply_markup=markup)

    elif message.text == '–£ –∫–æ–≥–æ —Ç–∞–∑–∏–∫?':
        print(str(datetime.datetime.now()) + '[INFO] ' + username + ' –∑–∞–ø—Ä–æ—Å–∏–ª —é–∑–µ—Ä–∞ —Å —Ç–∞–∑–æ–º.')

        if db_checkBooking() is not None:
            bot.send_message(message.chat.id, 'üî¥ –¢–∞–∑–∏–∫ —Å–µ–π—á–∞—Å —É @' + str(db_checkBooking())[2:-3])
        else:
            bot.send_message(message.chat.id,
                             'üü¢ –¢–∞–∑–∏–∫ —Å–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–µ–Ω! –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è @' + db_checkLastWasher())

        result = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
        for i in db_stats():
            if (i[0] == 1):
                result += 'ü•á '
            elif (i[0] == 2):
                result += 'ü•à '
            elif (i[0] == 3):
                result += 'ü•â '
            result += '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(i[1]) + ', —Å—Ç–∏—Ä–æ–∫: ' + str(i[3]) + ' (' + str(i[2]) + ' –º–∏–Ω)\n'

        print(result)
        bot.send_message(message.chat.id, result)


bot.infinity_polling()
